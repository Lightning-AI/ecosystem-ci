name: CI compatibility

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:  # Trigger the workflow on push or pull request, but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # At the end of every day
    - cron: "0 0 * * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  check-diff:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    # Map a step output to a job output
    outputs:
      matrix: ${{ steps.diff-files.outputs.runtimes }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Get PR diff
      id: diff-files
      env:
        PR_NUMBER: "${{ github.event.pull_request.number }}"
      run: |
        pip install -q -r requirements.txt
        python actions/assistant.py list_runtimes $PR_NUMBER
        pr_runtimes=$(python actions/assistant.py list_runtimes $PR_NUMBER 2>&1)
        echo $pr_runtimes
        echo "runtimes=$pr_runtimes" >> $GITHUB_OUTPUT

  pytest-project:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.check-diff.outputs.matrix) }}
    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 90
    needs: check-diff

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    - name: Cache period
      run: python -c 'import time ; days = time.time() / 60 / 60 / 24 ; print("period=" + str(int(days / 7)))' >> $GITHUB_OUTPUT
      id: times

    - name: Get pip cache dir
      id: pip-cache
      run: echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: $COMMON-td${{ steps.times.outputs.period }}-pip-$HASH_FILES
        restore-keys: $COMMON-td${{ steps.times.outputs.period }}-pip-
      env:
        COMMON: ${{ runner.os }}-py${{ matrix.python }}
        HASH_FILES: ${{ hashFiles('requirements.txt') }}-${{ matrix.config }}

    - name: Create script
      run: |
        pip install -q -r requirements.txt
        python actions/assistant.py prepare_env --config_file=${{ matrix.config }} > prepare_env.sh
        cat prepare_env.sh
      shell: bash

    - name: Some outputs
      run: |
        echo "args=$(python actions/assistant.py specify_tests --config_file=${{ matrix.config }})" >> $GITHUB_OUTPUT
        echo "env=$(python actions/assistant.py dict_env --config_file=${{ matrix.config }})" >> $GITHUB_OUTPUT
        echo "contacts=$(python actions/assistant.py contacts --config_file=${{ matrix.config }})" >> $GITHUB_OUTPUT
      id: extras

    - name: Prepare environment
      run: |
        bash prepare_env.sh
      shell: bash

    - name: Show dir tree
      if: runner.os == 'Linux'
      run: |
        sudo apt install -q -y tree
        tree .
      shell: bash

    - name: Testing
      env: ${{ fromJSON(steps.extras.outputs.env) }}
      working-directory: _integrations
      run: |
        coverage run -m pytest ${{ steps.extras.outputs.args }} -v --junitxml="junit/test-project-${{ matrix.config }}-${{ runner.os }}-${{ matrix.python }}.xml"

    - name: Upload pytest test results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-results-${{ runner.os }}-${{ matrix.python }}
        path: junit/test-results-${{ runner.os }}-${{ matrix.python }}.xml
      if: failure()

    # report failure to Slack
    # https://www.ravsam.in/blog/send-slack-notification-when-github-actions-fails/
    # https://dev.to/adamkdean/slack-notifications-with-github-actions-1lk5
    # https://axolo.co/blog/p/top-4-github-action-slack-integration
    - name: Slack notification
      if: failure() && github.event_name == 'schedule'
      uses: ravsamhq/notify-slack-action@v1
      with:
        status: ${{ job.status }}
        token: ${{ secrets.GITHUB_TOKEN }}
        notification_title: ${{ format('Env; {0} py{1} for *{2}*', runner.os, matrix.python, matrix.config) }}
        message_format: '{emoji} *{workflow}* {status_message}, see <{run_url}|detail>, cc: ${{ steps.extras.outputs.contacts }}'
        footer: 'Linked Repo <{repo_url}|{repo}>'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
