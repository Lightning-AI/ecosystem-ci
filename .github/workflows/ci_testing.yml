name: CI testing

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:  # Trigger the workflow on push or pull request, but only for the main branch
  push: {}
  pull_request:
    branches: [main]
  schedule:
    # At the end of every day
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  pytest:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04 , macOS-10.15, windows-2019]
        python-version: ["3.9"]
        config:
          - "PyTorchLightning/metrics_pl-release.yaml"
          - "PyTorchLightning/transformers_pl-release.yaml"
          - "PyTorchLightning/flash_pl-release.yaml"
        include:
          - {os: "ubuntu-20.04", python-version: "3.8", config: "PyTorchLightning/metrics_pl-master.yaml"}
          - {os: "ubuntu-20.04", python-version: "3.9", config: "PyTorchLightning/transformers_pl-master.yaml"}
          - {os: "ubuntu-20.04", python-version: "3.8", config: "PyTorchLightning/flash_pl-master.yaml"}
        exclude:
          - {os: "windows-2019", config: "PyTorchLightning/transformers_pl-release.yaml"}
    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 35

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache period
      run: echo "::set-output name=period::$(python -c 'import time ; days = time.time() / 60 / 60 / 24 ; print(int(days / 7))' 2>&1)"
      id: times

    # Note: This uses an internal pip API and may not always work
    # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
    - name: Get pip cache
      id: pip-cache
      run: |
        python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: $COMMON-td${{ steps.times.outputs.period }}-pip-$HASH_FILES
        restore-keys: $COMMON-td${{ steps.times.outputs.period }}-pip-
      env:
        COMMON: ${{ runner.os }}-py${{ matrix.python-version }}
        HASH_FILES: ${{ hashFiles('requirements.txt') }}-${{ hashFiles(format('actions/{0}', matrix.config)) }}

    - name: Create script
      run: |
        pip install -q -r requirements.txt
        python actions/assistant.py prepare_env --config_file=configs/${{ matrix.config }} > prepare_env.sh
        cat prepare_env.sh
      shell: bash

    - name: Some outputs
      run: |
        echo "::set-output name=args::$(python actions/assistant.py specify_tests --config_file=configs/${{ matrix.config }} 2>&1)"
        echo "::set-output name=env::$(python actions/assistant.py list_env --config_file=configs/${{ matrix.config }} 2>&1)"
        echo "::set-output name=contacts::$(python actions/assistant.py contacts --config_file=configs/${{ matrix.config }} 2>&1)"
      id: extras

    - name: Prepare environment
      run: |
        bash prepare_env.sh
      shell: bash

    - name: Show dir tree
      if: runner.os == 'Linux'
      run: |
        sudo apt install -q -y tree
        tree .
      shell: bash

    - name: Testing
      env:
        RESULTS: "junit/test-results-${{ matrix.config }}-${{ runner.os }}-${{ matrix.python-version }}.xml"
      run: |
        echo "${{ steps.extras.outputs.env }}"
        echo "${{ steps.extras.outputs.args }}"
        ${{ steps.extras.outputs.env }} coverage run -m pytest ${{ steps.extras.outputs.args }} -v --junitxml=$RESULTS

    - name: Upload pytest test results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-results-${{ runner.os }}-${{ matrix.python-version }}
        path: junit/test-results-${{ runner.os }}-${{ matrix.python-version }}.xml
      if: failure()

    # report failure to Slack
    # https://www.ravsam.in/blog/send-slack-notification-when-github-actions-fails/
    # https://dev.to/adamkdean/slack-notifications-with-github-actions-1lk5
    # https://axolo.co/blog/p/top-4-github-action-slack-integration
    - name: Slack notification
      if: failure() && github.ref == 'refs/heads/main'
      uses: ravsamhq/notify-slack-action@v1
      with:
        status: ${{ job.status }}
        token: ${{ secrets.GITHUB_TOKEN }}
        notification_title: ${{ format('Env; {0} py{1} for *{2}*', runner.os, matrix.python-version, matrix.config) }}
        message_format: '{emoji} *{workflow}* {status_message}, see <{run_url}|detail>, cc: ${{ steps.extras.outputs.contacts }}'
        footer: 'Linked Repo <{repo_url}|{repo}>'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
